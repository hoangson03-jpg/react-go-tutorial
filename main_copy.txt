package main

import (
	"fmt"
	"log"
	"os"

	"github.com/gofiber/fiber/v2"
	"github.com/joho/godotenv"
)

type Todo struct {
	ID        int    `json:"id"` // Dùng dấu nháy chéo `` để tạo thành JSON object
	Completed bool   `json:"completed"`
	Body      string `json:"body"`
}

func main() {
	fmt.Println("Hello World")
	app := fiber.New() // Fiber là hàm trong thư viện của gofiber

	err := godotenv.Load(".env")
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	PORT := os.Getenv("PORT")

	todos := []Todo{}

	// GET TODO
	app.Get("/api/todos", func(c *fiber.Ctx) error { // Phương thức Get của golang
		return c.Status(200).JSON(todos) // Trả về Status 200 và in ra Postman dòng tin nhắn (Đọc doc https://docs.gofiber.io/api/ctx#getreqheaders )
	})

	// Create a todo - Tạo ra đối tượng
	app.Post("/api/todos", func(c *fiber.Ctx) error { // Phương thức POST
		// Trỏ biến tới struct
		todo := &Todo{} // {id:0,completed:false,body:""}

		//Liên kết phần thân yêu cầu với một cấu trúc với BodyParser (cần phải có khi trỏ tới cấu trúc của đối tượng)
		if err := c.BodyParser(todo); err != nil {
			return err
		}

		if todo.Body == "" {
			return c.Status(400).JSON(fiber.Map{"error": "Todo body is required"})
		}

		todo.ID = len(todos) + 1
		todos = append(todos, *todo) // Nối các phần tử với nhau

		/*
			var x int = 5 // 0x00001

			var p *int = &x // 0x00001

			fmt.Println(p) // 0x00001
			fmt.Println(*p) // 5
		*/

		return c.Status(201).JSON(todo)

	})

	// Update a Todo
	app.Patch("/api/todos/:id", func(c *fiber.Ctx) error {
		id := c.Params("id")

		for i, todo := range todos {
			if fmt.Sprint(todo.ID) == id { // convert to string
				todos[i].Completed = true
				return c.Status(200).JSON(todos[i])
			}
		}

		return c.Status(404).JSON(fiber.Map{"error": "Todo not found"})
	})

	// Delete a Todo

	app.Delete("/api/todos/:id", func(c *fiber.Ctx) error {
		id := c.Params("id")

		for i, todo := range todos {
			if fmt.Sprint(todo.ID) == id {
				todos = append(todos[:i], todos[i+1:]...)
				// Giả sử mảng có 1 2 3 4 5 mà ta chọn xóa đi số 2 thì
				// cái todos trước vị trí mà ta xóa todos[:i] sẽ được phân tách và các todos từ vị trí i+1 trở đi sẽ được phân tách ==> 1 3 4 5
				return c.Status(200).JSON(fiber.Map{"Success": "true"})
			}
		}
		return c.Status(404).JSON(fiber.Map{"error": "Todo not found"})
	})

	log.Fatal(app.Listen(":" + PORT)) // Lắng nghe sự kiện sau đó mới chạy app
}
